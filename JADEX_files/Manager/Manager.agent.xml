<!-- 
     <H3>The Manager agent.</H3>
     
     The Manager Agent instantiate the perceptor and actuator agent
     whenever an alarm event has arisen. It also instantiate CLIPS.

                         *******************
                         ** first version **
                         *******************
     This first version of the agent implementation just considers the
     unauthorised presence alarm. Therefore, it assert the hazard event 
     as an instance of the class HAZARD. And pass the control to the 
     perceptor.
-->

<agent xmlns="http://jadex.sourceforge.net/jadex"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                   http://jadex.sourceforge.net/jadex-0.96.xsd"
       name="Manager"
       package="jadex.examples.MASCS.Manager">

  <imports> 
    <import>jadex.examples.MASCS.*</import>  
    <import>jadex.*</import>
    <import>jadex.runtime.*</import>
    <import>jadex.runtime.impl.*</import>
    <import>jadex.planlib.*</import>
    <import>java.util.*</import>
    <import>jadex.examples.MASCS.Perceptor</import>
    <import>jadex.planlib.*</import>		
    <import>jadex.adapter.fipa.*</import>
  </imports>

  <capabilities>
    <capability name="startcap" file="StartAgents"/>
    <capability name="amscap" file="jadex.planlib.AMS"/>
    <capability name="dfcap" file="jadex.planlib.DF"/>
    <capability name="procap" file="jadex.planlib.Protocols"/>
  </capabilities>
 
  

  <!--
    *********************************
    ****** List of beliefs ********** 
    ********************************* 
    -->

  <beliefs>
    <beliefset name="eventTypes" class="Events.Event">
    </beliefset>
    <beliefset name="startedagents" class="AgentIdentifier"/>
    <beliefref name="rp_filter" class="IFilter">
      <concrete ref="procap.rp_filter"/>
    </beliefref>
    <belief name="waiting" class="WaitingForEventsIce"/>	
  </beliefs>
  

  <!--
      *********************************
      ******** List of goals ********** 
      ********************************* 
    -->

  <goals>
    <achievegoalref name="start_agents">
      <concrete ref="startcap.start_agents"/>
    </achievegoalref>
    <achievegoalref name="df_search">
      <concrete ref="dfcap.df_search"/>
    </achievegoalref>
    <achievegoal name="sendEventType">
      <parameter name="eventType" class="Events.Event">
	<bindingoptions>$beliefbase.eventTypes</bindingoptions>
      </parameter>
      <!--Esta condicion es necesaria porque se lanzaba el goal antes de que
	  se hubieran registrado en el df los agentes, por lo que daba un error -->
      <unique/>     
      <creationcondition>$beliefbase.startedagents.length &gt; 0 &amp;&amp;
	$beliefbase.eventTypes.length &gt; 0</creationcondition>
    </achievegoal>
  </goals>



  <!--
      *********************************
      ******** List of plans ********** 
      ********************************* 
    -->
  <plans>
    <plan name="starter">
      <parameterset name="agentinfos" class="StartAgentInfo"/>
      <body class="StarterPlan"/>
    </plan>

    <!-- Plan for starting the reasoning engine,
	 and load the appropriate files
    <plan name="CLIPS_starter">
      <body class="CLIPS_starterPlan"/>
    </plan> -->

    <!-- Plan for sending the event type to the
	 perceptor agent, who will act in consecuence -->
    <plan name="SendEventTypePlan">
      <parameter name="eventType" class="Event">
	<goalmapping ref="sendEventType.eventType"/>
      </parameter>
      <body>new SendEventTypePlan()</body>
      <trigger>
	<goal ref="sendEventType"/>
      </trigger>
    </plan> 

    <!-- Plan for starting waiting for the events, of any type.
	 Launch the event channel, and when an event is published
	 the plan notified the agent, who pass to the following state
	 "Managing Event", launching the perceptor 
    <plan name="WaitingForEvents">
      <body>new WaitingForEventsPlan()</body>
    </plan> -->

    
  </plans>
  

  <!--
    *********************************
    ****** List of events  ********** 
    ********************************* 
    -->
 <events> 
   <!-- Message informing about the type of event that the perceptor
	is to be dealing with. -->
    <messageevent name="eventType_inform" type="fipa" direction="send"  >
      <parameter name="performative" class="String" direction="fixed">
	<value>SFipa.INFORM</value>
      </parameter>
      <parameter name="language" class="String" direction="fixed">
	<value>SFipa.JAVA_XML</value>
      </parameter>
      <parameter name="ontology" class="String" direction="fixed">
	<value>jadex.examples.MASCS.UnauthorisedPresenceOntologyOntology.ONTOLOGY_NAME</value>
      </parameter>
    </messageevent>
  </events>


  <!--
    *********************************
    ******** Configuration **********
    ********************************* 
    -->
 
  <configurations>
    <configuration name="default">
      <beliefs>
	<initialbelief ref="rp_filter">
	  <fact>IFilter.ALWAYS</fact>
	</initialbelief>
	<initialbelief ref="waiting">
	  <fact>new WaitingForEventsIce($agent.getExternalAccess())</fact>
	</initialbelief>
      </beliefs>
      <plans>
	<initialplan ref="starter">
	  <parameterset ref="agentinfos">    
	    <value>new StartAgentInfo("jadex.examples.MASCS.Perceptor.Perceptor", "Perceptor", 0, null)</value>
	    <!-- <value>new StartAgentInfo("actor.Actor", "Actor", 0, null)</value>--> 
	  </parameterset>
	</initialplan>
	
      </plans>

    </configuration>
  </configurations>
</agent>
